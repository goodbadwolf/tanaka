# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# Global settings
default_install_hook_types: [pre-commit, commit-msg]
default_stages: [commit]
fail_fast: false  # Run all hooks even if one fails
minimum_pre_commit_version: '3.5.0'

repos:
  # Python formatting and linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.8.8
    hooks:
      - id: ruff-format
        name: Format Python code with ruff
      - id: ruff
        name: Lint Python code with ruff
        args: [--fix, --exit-non-zero-on-fix]

  # Shell script checks
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: Check shell scripts with shellcheck
        args: [-x]  # Follow source statements

  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.10.0-1
    hooks:
      - id: shfmt
        name: Format shell scripts with shfmt
        args: [-i, '2', -w]  # 2 space indent, write in place

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint-fix
        name: Fix markdown files with markdownlint
        args: [--fix]
        exclude: ^(node_modules|coverage)/

  # TypeScript/JavaScript checks (local hooks using pnpm)
  - repo: local
    hooks:
      - id: eslint
        name: Lint TypeScript with ESLint
        entry: bash -c 'cd extension && pnpm run lint:fix'
        language: system
        files: ^extension/.*\.(ts|tsx|js|jsx)$
        pass_filenames: false
        require_serial: true

      - id: typescript
        name: Type check TypeScript
        entry: python scripts/pre_commit/quick_mode.py typescript bash -c 'cd extension && pnpm run typecheck'
        language: system
        files: ^extension/.*\.(ts|tsx)$
        pass_filenames: false
        require_serial: true

  # Rust checks (local hooks using cargo)
  - repo: local
    hooks:
      - id: rustfmt
        name: Format Rust code
        entry: bash -c 'cd server && cargo fmt'
        language: system
        files: ^server/.*\.rs$
        pass_filenames: false

      - id: clippy
        name: Lint Rust code with clippy
        entry: python scripts/pre_commit/quick_mode.py clippy bash -c 'cd server && cargo clippy --all-targets -- -D warnings'
        language: system
        files: ^server/.*\.rs$
        pass_filenames: false
        require_serial: true

  # Custom project-specific checks
  - repo: local
    hooks:
      - id: documentation-consistency
        name: Check documentation consistency
        entry: python scripts/pre_commit/check_documentation.py
        language: python
        always_run: true
        pass_filenames: false
        additional_dependencies: []

      - id: roadmap-reminder
        name: Roadmap update reminder
        entry: python scripts/pre_commit/roadmap_reminder.py
        language: python
        files: ^(extension|server)/.*\.(ts|tsx|rs)$
        pass_filenames: true

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.2.3
    hooks:
      - id: commitizen
        name: Check commit message format
        stages: [commit-msg]

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: check-toml
      - id: check-json
        exclude: tsconfig.json  # Has comments

# Configuration for specific hooks
# Quick mode: PRE_COMMIT_QUICK=1 git commit
# Skip all: git commit --no-verify
# Skip specific: SKIP=hook-id git commit