# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

default_install_hook_types: [pre-commit, commit-msg]
default_stages: [pre-commit]
fail_fast: true
minimum_pre_commit_version: "3.5.0"

repos:
  # Python formatting and linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.1
    hooks:
      - id: ruff-format
        name: Format Python code with ruff
      - id: ruff
        name: Lint Python code with ruff
        args: [--fix, --exit-non-zero-on-fix]

  # Shell script checks
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: Check shell scripts with shellcheck
        args: [-x, -e, SC1091] # Follow source statements, exclude source file not found

  # Shell script formatting
  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.11.0-1
    hooks:
      - id: shfmt
        name: Format shell scripts with shfmt
        args: [-i, "2", -w] # 2 space indent, write in place

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint-fix
        name: Fix markdown files with markdownlint
        args: [--fix, --disable, MD013, --disable, MD040] # Disable line length and code block language checks
        exclude: ^(node_modules|coverage)/

  # TOML formatting and linting
  - repo: https://github.com/ComPWA/taplo-pre-commit
    rev: v0.9.3
    hooks:
      - id: taplo-format
        name: Format TOML files
        args: [--option, "indent_string=  "] # 2-space indentation

  # YAML formatting and linting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: Format YAML files
        types: [yaml]
        args: [--write, --parser=yaml]

  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Lint YAML files
        args: [--format, parsable, --strict]
        files: \.(yml|yaml)$

  # Rust checks
  - repo: local
    hooks:
      - id: rustfmt
        name: Format Rust code
        entry: bash -c 'cd server && cargo fmt'
        language: system
        files: ^server/.*\.rs$
        pass_filenames: false

      - id: clippy
        name: Lint Rust code with clippy
        entry: bash -c 'cd server && cargo clippy --all-targets -- -D warnings'
        language: system
        files: ^server/.*\.rs$
        pass_filenames: false
        require_serial: true

      - id: generate-api-models
        name: Generate TypeScript API models from Rust
        entry: python scripts/tanaka.py generate api-models
        language: python
        files: ^server/src/.*\.rs$
        pass_filenames: false
        require_serial: false
        additional_dependencies: []

      - id: rust-tests
        name: Run Rust tests
        entry: bash -c 'cd server && cargo test --lib'
        language: system
        files: ^server/.*\.rs$
        pass_filenames: false
        require_serial: true

  # TypeScript/JavaScript checks
  - repo: local
    hooks:
      - id: format-generated-typescript
        name: Format generated TypeScript files
        entry: bash -c 'cd extension && pnpm run lint:fix:generated || true'
        language: system
        files: ^extension/src/api/(errors|models|sync)/.*\.ts$
        pass_filenames: false
        always_run: false

      - id: eslint
        name: Lint TypeScript with ESLint
        entry: bash -c 'cd extension && pnpm run lint:fix'
        language: system
        files: ^extension/.*\.(ts|tsx|js|jsx)$
        pass_filenames: false
        require_serial: true

      - id: typescript
        name: Type check TypeScript
        entry: bash -c 'cd extension && pnpm run typecheck'
        language: system
        files: ^extension/.*\.(ts|tsx)$
        pass_filenames: false
        require_serial: true

      - id: extension-tests
        name: Run TypeScript tests
        entry: bash -c 'cd extension && pnpm test'
        language: system
        files: ^extension/.*\.(ts|tsx|test\.ts|test\.tsx)$
        pass_filenames: false
        require_serial: true

  # Miscellaneous checks
  - repo: local
    hooks:
      - id: documentation-consistency
        name: Check documentation consistency
        entry: python scripts/pre_commit/check_documentation.py
        language: python
        always_run: true
        pass_filenames: false
        additional_dependencies: []

      - id: roadmap-reminder
        name: Roadmap update reminder
        entry: python scripts/pre_commit/roadmap_reminder.py
        language: python
        files: ^(extension|server)/.*\.(ts|tsx|rs)$
        pass_filenames: true

      - id: test-github-actions
        name: Test GitHub Actions workflows locally
        entry: python scripts/tanaka.py test-ci --check
        language: python
        files: ^\.github/workflows/.*\.(yml|yaml)$
        pass_filenames: false
        additional_dependencies: []
        stages: [manual] # Only run manually with: pre-commit run --hook-stage manual test-github-actions
        # Note: Set to manual stage because it takes a long time to run locally
        # Run directly with: uv run scripts/tanaka.py test-ci

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.8.3
    hooks:
      - id: commitizen
        name: Check commit message format
        stages: [commit-msg]

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: check-toml
      - id: check-json
        exclude: tsconfig.json # Has comments

# Configuration for specific hooks
# Skip all: git commit --no-verify
# Skip specific: SKIP=hook-id git commit
# Skip tests: SKIP=extension-tests,rust-tests git commit

# CI configuration
ci:
  autofix_prs: true # Automatically fix PRs
  autofix_commit_msg: "chore: auto-fix from pre-commit hooks"
  autoupdate_branch: "" # Update PRs on default branch
  autoupdate_commit_msg: "chore: pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [] # Skip local-only hooks in CI
  submodules: false
