import{b as a}from"./browser-polyfill-DMmbowld.js";import{g as w}from"./index-BoOsyVcS.js";class i extends Error{constructor(e,t,s){super(e),this.status=t,this.statusText=s,this.name="APIError"}}class l{constructor(e){this.token="unset-token";try{this.baseUrl=new URL(e)}catch{throw new i(`Invalid server URL: ${e}`)}}setAuthToken(e){if(!e)throw new i("Invalid token");this.token=e}getHeaders(e={}){return{Authorization:`Bearer ${this.token}`,...e}}async request(e,t={}){var o;const s=new URL(e,this.baseUrl),r=await fetch(s.toString(),{...t,headers:{...this.getHeaders(t.headers)}});if(!r.ok)throw new i(`Server error: ${r.status} ${r.statusText}`,r.status,r.statusText);return(o=r.headers.get("content-type"))!=null&&o.includes("application/json")?r.json():r}async syncTabs(e){try{return(await this.request("/sync",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({tabs:e})})).tabs}catch(t){throw console.error("Sync failed:",t),t}}async checkHealth(){try{return await this.request("/health"),!0}catch{return!1}}}function h(n,e){if(!n.id||!n.url)return null;const t={url:n.url,title:n.title||"",favIconUrl:n.favIconUrl||"",index:n.index,pinned:n.pinned,active:n.active};return{id:`tab-${n.id}`,windowId:`window-${e}`,data:JSON.stringify(t),updatedAt:Date.now()}}class u{constructor(){this.trackedWindows=new Set}track(e){this.trackedWindows.add(e)}untrack(e){this.trackedWindows.delete(e)}isTracked(e){return this.trackedWindows.has(e)}getTrackedWindows(){return Array.from(this.trackedWindows)}getTrackedCount(){return this.trackedWindows.size}clear(){this.trackedWindows.clear()}}class T{constructor(e,t){this.api=e,this.windowTracker=t,this.syncInterval=null,this.SYNC_INTERVAL_MS=5e3}async syncNow(){if(this.windowTracker.getTrackedCount()!==0)try{const e=await this.collectTrackedTabs(),t=await this.api.syncTabs(e);console.log(`Synced ${e.length} local tabs, received ${t.length} total tabs`)}catch(e){console.error("Sync failed:",e)}}start(){this.syncInterval||(this.syncNow(),this.syncInterval=window.setInterval(()=>{this.syncNow()},this.SYNC_INTERVAL_MS))}stop(){this.syncInterval&&(clearInterval(this.syncInterval),this.syncInterval=null)}isRunning(){return this.syncInterval!==null}async collectTrackedTabs(){const e=[];for(const t of this.windowTracker.getTrackedWindows())try{const s=await a.tabs.query({windowId:t});e.push(...s)}catch(s){console.error(`Failed to get tabs for window ${t}:`,s)}return e.map(t=>t.windowId?h(t,t.windowId):null).filter(t=>t!==null)}}class y{constructor(e,t){this.windowTracker=e,this.syncManager=t}setupListeners(){a.tabs.onCreated.addListener(this.handleTabCreated.bind(this)),a.tabs.onRemoved.addListener(this.handleTabRemoved.bind(this)),a.tabs.onUpdated.addListener(this.handleTabUpdated.bind(this)),a.tabs.onMoved.addListener(this.handleTabMoved.bind(this)),a.windows.onRemoved.addListener(this.handleWindowRemoved.bind(this))}async handleTabCreated(e){e.windowId&&this.windowTracker.isTracked(e.windowId)&&(console.log("Tab created:",e),await this.syncManager.syncNow())}async handleTabRemoved(e,t){this.windowTracker.isTracked(t.windowId)&&(console.log("Tab removed:",e),await this.syncManager.syncNow())}async handleTabUpdated(e,t,s){s.windowId&&this.windowTracker.isTracked(s.windowId)&&t.url&&(console.log("Tab updated:",e,t),await this.syncManager.syncNow())}async handleTabMoved(e,t){this.windowTracker.isTracked(t.windowId)&&(console.log("Tab moved:",e,t),await this.syncManager.syncNow())}async handleWindowRemoved(e){this.windowTracker.isTracked(e)&&(this.windowTracker.untrack(e),console.log("Tracked window removed:",e),this.windowTracker.getTrackedCount()===0?this.syncManager.stop():await this.syncManager.syncNow())}}const d={authToken:"unset-token",syncInterval:5e3},c=Object.keys(d);class k{async load(){const e=await a.storage.local.get(c);return{...d,...e}}async save(e){await a.storage.local.set(e)}async clear(){await a.storage.local.remove(c)}}function g(n){if(typeof n!="object"||n===null||!("type"in n))return null;const e=n;switch(e.type){case"TRACK_WINDOW":case"UNTRACK_WINDOW":return typeof e.windowId=="number"?e:null;case"GET_TRACKED_WINDOWS":case"CONFIG_UPDATED":case"SETTINGS_UPDATED":return e;default:return null}}class p{constructor(e,t){this.windowTracker=e,this.syncManager=t}async handleMessage(e){const t=g(e);if(!t)return{error:"Invalid message format"};switch(t.type){case"TRACK_WINDOW":return this.handleTrackWindow(t);case"UNTRACK_WINDOW":return this.handleUntrackWindow(t);case"GET_TRACKED_WINDOWS":return this.handleGetTrackedWindows();default:return{error:"Unknown message type"}}}handleTrackWindow(e){return this.windowTracker.track(e.windowId),console.log("Now tracking window:",e.windowId),this.syncManager.start(),{success:!0}}async handleUntrackWindow(e){return this.windowTracker.untrack(e.windowId),console.log("Stopped tracking window:",e.windowId),this.windowTracker.getTrackedCount()===0?this.syncManager.stop():await this.syncManager.syncNow(),{success:!0}}handleGetTrackedWindows(){return{windowIds:this.windowTracker.getTrackedWindows()}}}class I{constructor(){this.api=new l(w().serverUrl),this.windowTracker=new u,this.syncManager=new T(this.api,this.windowTracker),this.tabEventHandler=new y(this.windowTracker,this.syncManager),this.userSettingsManager=new k,this.messageHandler=new p(this.windowTracker,this.syncManager)}async initialize(){const e=await this.userSettingsManager.load();this.api.setAuthToken(e.authToken),this.setupListeners(),console.log("Tanaka background service initialized")}setupListeners(){this.tabEventHandler.setupListeners(),a.runtime.onMessage.addListener(async e=>typeof e=="object"&&e!==null&&"type"in e&&e.type==="SETTINGS_UPDATED"?(await this.reinitializeWithNewSettings(),{success:!0}):this.messageHandler.handleMessage(e))}async reinitializeWithNewSettings(){const e=await this.userSettingsManager.load();this.api.setAuthToken(e.authToken),console.log("Reinitialized with updated settings")}}const f=new I;f.initialize();
//# sourceMappingURL=background.js.map
