{"version":3,"file":"popup.js","sources":["../../src/popup/popup.ts"],"sourcesContent":["import browser from 'webextension-polyfill';\nimport type { Message, MessageResponse } from '../core.js';\n\nconst trackWindowCheckbox = document.getElementById('track-window') as HTMLInputElement;\nconst statusDiv = document.getElementById('status') as HTMLDivElement;\nconst openSettingsLink = document.getElementById('open-settings') as HTMLAnchorElement;\n\n// Get current window tracking status\nasync function updateUI() {\n  const currentWindow = await browser.windows.getCurrent();\n  if (!currentWindow.id) {\n    console.error('Current window has no ID');\n    return;\n  }\n\n  const message: Message = { type: 'GET_TRACKED_WINDOWS' };\n  const response = (await browser.runtime.sendMessage(message)) as MessageResponse;\n\n  if ('windowIds' in response) {\n    trackWindowCheckbox.checked = response.windowIds.includes(currentWindow.id);\n    updateStatus(trackWindowCheckbox.checked);\n  } else if ('error' in response) {\n    console.error('Error getting tracked windows:', response.error);\n    statusDiv.innerHTML = `<p style=\"color: red;\">Error: ${response.error}</p>`;\n  }\n}\n\nfunction updateStatus(isTracked: boolean) {\n  statusDiv.innerHTML = isTracked\n    ? '<p style=\"color: green;\">âœ“ This window is being synced</p>'\n    : '<p>This window is not being synced</p>';\n}\n\n// Handle checkbox change\ntrackWindowCheckbox.addEventListener('change', async () => {\n  const currentWindow = await browser.windows.getCurrent();\n  if (!currentWindow.id) {\n    console.error('Current window has no ID');\n    trackWindowCheckbox.checked = !trackWindowCheckbox.checked;\n    return;\n  }\n\n  const message: Message = trackWindowCheckbox.checked\n    ? { type: 'TRACK_WINDOW', windowId: currentWindow.id }\n    : { type: 'UNTRACK_WINDOW', windowId: currentWindow.id };\n\n  const response = (await browser.runtime.sendMessage(message)) as MessageResponse;\n\n  if ('error' in response) {\n    console.error('Error updating window tracking:', response.error);\n    statusDiv.innerHTML = `<p style=\"color: red;\">Error: ${response.error}</p>`;\n    // Revert checkbox state on error\n    trackWindowCheckbox.checked = !trackWindowCheckbox.checked;\n  } else {\n    updateStatus(trackWindowCheckbox.checked);\n  }\n});\n\n// Open settings\nopenSettingsLink.addEventListener('click', (e) => {\n  e.preventDefault();\n  browser.runtime.openOptionsPage();\n  window.close();\n});\n\n// Initialize UI\nupdateUI();\n"],"names":["trackWindowCheckbox","statusDiv","openSettingsLink","updateUI","currentWindow","browser","message","response","updateStatus","isTracked"],"mappings":"kGAGA,MAAMA,EAAsB,SAAS,eAAe,cAAc,EAC5DC,EAAY,SAAS,eAAe,QAAQ,EAC5CC,EAAmB,SAAS,eAAe,eAAe,EAGhE,eAAeC,GAAW,CACxB,MAAMC,EAAgB,MAAMC,EAAQ,QAAQ,WAAA,EAC5C,GAAI,CAACD,EAAc,GAAI,CACrB,QAAQ,MAAM,0BAA0B,EACxC,MAAA,CAGF,MAAME,EAAmB,CAAE,KAAM,qBAAA,EAC3BC,EAAY,MAAMF,EAAQ,QAAQ,YAAYC,CAAO,EAEvD,cAAeC,GACjBP,EAAoB,QAAUO,EAAS,UAAU,SAASH,EAAc,EAAE,EAC1EI,EAAaR,EAAoB,OAAO,GAC/B,UAAWO,IACpB,QAAQ,MAAM,iCAAkCA,EAAS,KAAK,EAC9DN,EAAU,UAAY,iCAAiCM,EAAS,KAAK,OAEzE,CAEA,SAASC,EAAaC,EAAoB,CACxCR,EAAU,UAAYQ,EAClB,6DACA,wCACN,CAGAT,EAAoB,iBAAiB,SAAU,SAAY,CACzD,MAAMI,EAAgB,MAAMC,EAAQ,QAAQ,WAAA,EAC5C,GAAI,CAACD,EAAc,GAAI,CACrB,QAAQ,MAAM,0BAA0B,EACxCJ,EAAoB,QAAU,CAACA,EAAoB,QACnD,MAAA,CAGF,MAAMM,EAAmBN,EAAoB,QACzC,CAAE,KAAM,eAAgB,SAAUI,EAAc,EAAA,EAChD,CAAE,KAAM,iBAAkB,SAAUA,EAAc,EAAA,EAEhDG,EAAY,MAAMF,EAAQ,QAAQ,YAAYC,CAAO,EAEvD,UAAWC,GACb,QAAQ,MAAM,kCAAmCA,EAAS,KAAK,EAC/DN,EAAU,UAAY,iCAAiCM,EAAS,KAAK,OAErEP,EAAoB,QAAU,CAACA,EAAoB,SAEnDQ,EAAaR,EAAoB,OAAO,CAE5C,CAAC,EAGDE,EAAiB,iBAAiB,QAAU,GAAM,CAChD,EAAE,eAAA,EACFG,EAAQ,QAAQ,gBAAA,EAChB,OAAO,MAAA,CACT,CAAC,EAGDF,EAAA"}