{"version":3,"file":"background.js","sources":["../src/api/api.ts","../src/sync/WindowTracker.ts","../src/sync/SyncManager.ts","../src/sync/TabEventHandler.ts","../src/sync/user-settings.ts","../src/core.ts","../src/sync/MessageHandler.ts","../src/background.ts"],"sourcesContent":["import browser from 'webextension-polyfill';\nimport type { Tab, SyncRequest, SyncResponse } from './models';\n\nexport type { Tab };\n\nexport interface TabData {\n  url: string;\n  title: string;\n  favIconUrl: string;\n  index: number;\n  pinned: boolean;\n  active: boolean;\n}\n\nexport class APIError extends Error {\n  constructor(\n    message: string,\n    public readonly status?: number,\n    public readonly statusText?: string,\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\nexport class TanakaAPI {\n  private baseUrl: URL;\n  private token: string = 'unset-token';\n\n  constructor(baseUrl: string) {\n    try {\n      this.baseUrl = new URL(baseUrl);\n    } catch {\n      throw new APIError(`Invalid server URL: ${baseUrl}`);\n    }\n  }\n\n  setAuthToken(token: string) {\n    if (!token) {\n      throw new APIError('Invalid token');\n    }\n\n    this.token = token;\n  }\n\n  private getHeaders(additionalHeaders: Record<string, string> = {}): Record<string, string> {\n    return {\n      Authorization: `Bearer ${this.token}`,\n      ...additionalHeaders,\n    };\n  }\n\n  private async request<T>(path: string, options: RequestInit = {}): Promise<T> {\n    const url = new URL(path, this.baseUrl);\n\n    const response = await fetch(url.toString(), {\n      ...options,\n      headers: {\n        ...this.getHeaders(options.headers as Record<string, string>),\n      },\n    });\n\n    if (!response.ok) {\n      throw new APIError(\n        `Server error: ${response.status} ${response.statusText}`,\n        response.status,\n        response.statusText,\n      );\n    }\n\n    if (response.headers.get('content-type')?.includes('application/json')) {\n      return response.json() as Promise<T>;\n    }\n\n    return response as unknown as T;\n  }\n\n  async syncTabs(tabs: Tab[]): Promise<Tab[]> {\n    try {\n      const data = await this.request<SyncResponse>('/sync', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ tabs } as SyncRequest),\n      });\n\n      return data.tabs;\n    } catch (error) {\n      console.error('Sync failed:', error);\n      throw error;\n    }\n  }\n\n  async checkHealth(): Promise<boolean> {\n    try {\n      await this.request('/health');\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport function browserTabToSyncTab(tab: browser.Tabs.Tab, windowId: number): Tab | null {\n  if (!tab.id || !tab.url) return null;\n\n  const tabData: TabData = {\n    url: tab.url,\n    title: tab.title || '',\n    favIconUrl: tab.favIconUrl || '',\n    index: tab.index,\n    pinned: tab.pinned,\n    active: tab.active,\n  };\n\n  return {\n    id: `tab-${tab.id}`,\n    windowId: `window-${windowId}`,\n    data: JSON.stringify(tabData),\n    updatedAt: Date.now(),\n  };\n}\n\nexport function parseSyncTab(tab: Tab): TabData | null {\n  try {\n    return JSON.parse(tab.data) as TabData;\n  } catch {\n    return null;\n  }\n}\n","export class WindowTracker {\n  private trackedWindows = new Set<number>();\n\n  track(windowId: number): void {\n    this.trackedWindows.add(windowId);\n  }\n\n  untrack(windowId: number): void {\n    this.trackedWindows.delete(windowId);\n  }\n\n  isTracked(windowId: number): boolean {\n    return this.trackedWindows.has(windowId);\n  }\n\n  getTrackedWindows(): number[] {\n    return Array.from(this.trackedWindows);\n  }\n\n  getTrackedCount(): number {\n    return this.trackedWindows.size;\n  }\n\n  clear(): void {\n    this.trackedWindows.clear();\n  }\n}\n","import browser from 'webextension-polyfill';\nimport { TanakaAPI, browserTabToSyncTab, type Tab } from '../api/api.js';\nimport type { WindowTracker } from './WindowTracker.js';\n\nexport class SyncManager {\n  private syncInterval: number | null = null;\n  private readonly SYNC_INTERVAL_MS = 5000;\n\n  constructor(\n    private readonly api: TanakaAPI,\n    private readonly windowTracker: WindowTracker,\n  ) {}\n\n  async syncNow(): Promise<void> {\n    if (this.windowTracker.getTrackedCount() === 0) return;\n\n    try {\n      const localTabs = await this.collectTrackedTabs();\n      const allTabs = await this.api.syncTabs(localTabs);\n      console.log(`Synced ${localTabs.length} local tabs, received ${allTabs.length} total tabs`);\n    } catch (error) {\n      console.error('Sync failed:', error);\n    }\n  }\n\n  start(): void {\n    if (this.syncInterval) return;\n\n    this.syncNow();\n\n    this.syncInterval = window.setInterval(() => {\n      this.syncNow();\n    }, this.SYNC_INTERVAL_MS);\n  }\n\n  stop(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return this.syncInterval !== null;\n  }\n\n  private async collectTrackedTabs(): Promise<Tab[]> {\n    const tabs: Parameters<typeof browserTabToSyncTab>[0][] = [];\n\n    for (const windowId of this.windowTracker.getTrackedWindows()) {\n      try {\n        const windowTabs = await browser.tabs.query({ windowId });\n        tabs.push(...windowTabs);\n      } catch (error) {\n        console.error(`Failed to get tabs for window ${windowId}:`, error);\n      }\n    }\n\n    return tabs\n      .map((tab) => (tab.windowId ? browserTabToSyncTab(tab, tab.windowId) : null))\n      .filter((tab): tab is Tab => tab !== null);\n  }\n}\n","import browser from 'webextension-polyfill';\nimport type { WindowTracker } from './WindowTracker.js';\nimport type { SyncManager } from './SyncManager.js';\n\nexport class TabEventHandler {\n  constructor(\n    private readonly windowTracker: WindowTracker,\n    private readonly syncManager: SyncManager,\n  ) {}\n\n  setupListeners(): void {\n    browser.tabs.onCreated.addListener(this.handleTabCreated.bind(this));\n    browser.tabs.onRemoved.addListener(this.handleTabRemoved.bind(this));\n    browser.tabs.onUpdated.addListener(this.handleTabUpdated.bind(this));\n    browser.tabs.onMoved.addListener(this.handleTabMoved.bind(this));\n    browser.windows.onRemoved.addListener(this.handleWindowRemoved.bind(this));\n  }\n\n  private async handleTabCreated(tab: browser.Tabs.Tab): Promise<void> {\n    if (tab.windowId && this.windowTracker.isTracked(tab.windowId)) {\n      console.log('Tab created:', tab);\n      await this.syncManager.syncNow();\n    }\n  }\n\n  private async handleTabRemoved(\n    tabId: number,\n    removeInfo: browser.Tabs.OnRemovedRemoveInfoType,\n  ): Promise<void> {\n    if (this.windowTracker.isTracked(removeInfo.windowId)) {\n      console.log('Tab removed:', tabId);\n      await this.syncManager.syncNow();\n    }\n  }\n\n  private async handleTabUpdated(\n    tabId: number,\n    changeInfo: browser.Tabs.OnUpdatedChangeInfoType,\n    tab: browser.Tabs.Tab,\n  ): Promise<void> {\n    if (tab.windowId && this.windowTracker.isTracked(tab.windowId) && changeInfo.url) {\n      console.log('Tab updated:', tabId, changeInfo);\n      await this.syncManager.syncNow();\n    }\n  }\n\n  private async handleTabMoved(\n    tabId: number,\n    moveInfo: browser.Tabs.OnMovedMoveInfoType,\n  ): Promise<void> {\n    if (this.windowTracker.isTracked(moveInfo.windowId)) {\n      console.log('Tab moved:', tabId, moveInfo);\n      await this.syncManager.syncNow();\n    }\n  }\n\n  private async handleWindowRemoved(windowId: number): Promise<void> {\n    if (this.windowTracker.isTracked(windowId)) {\n      this.windowTracker.untrack(windowId);\n      console.log('Tracked window removed:', windowId);\n\n      if (this.windowTracker.getTrackedCount() === 0) {\n        this.syncManager.stop();\n      } else {\n        await this.syncManager.syncNow();\n      }\n    }\n  }\n}\n","import browser from 'webextension-polyfill';\n\nconst USER_SETTINGS_DEFAULTS = {\n  authToken: 'unset-token',\n  syncInterval: 5000,\n};\n\nexport type UserSettings = typeof USER_SETTINGS_DEFAULTS;\n\nconst USER_SETTINGS_KEYS = Object.keys(USER_SETTINGS_DEFAULTS) as (keyof UserSettings)[];\n\nexport class UserSettingsManager {\n  async load(): Promise<UserSettings> {\n    const stored = await browser.storage.local.get(USER_SETTINGS_KEYS);\n\n    return {\n      ...USER_SETTINGS_DEFAULTS,\n      ...stored,\n    } as UserSettings;\n  }\n\n  async save(settings: Partial<UserSettings>): Promise<void> {\n    await browser.storage.local.set(settings);\n  }\n\n  async clear(): Promise<void> {\n    await browser.storage.local.remove(USER_SETTINGS_KEYS);\n  }\n}\n","export type Message =\n  | { type: 'TRACK_WINDOW'; windowId: number }\n  | { type: 'UNTRACK_WINDOW'; windowId: number }\n  | { type: 'GET_TRACKED_WINDOWS' }\n  | { type: 'CONFIG_UPDATED' }\n  | { type: 'SETTINGS_UPDATED' };\n\nexport type MessageResponse = { windowIds: number[] } | { success: boolean } | { error: string };\n\nexport function asMessage(value: unknown): Message | null {\n  if (typeof value !== 'object' || value === null || !('type' in value)) {\n    return null;\n  }\n\n  const msg = value as Record<string, unknown>;\n\n  switch (msg.type) {\n    case 'TRACK_WINDOW':\n    case 'UNTRACK_WINDOW':\n      if (typeof msg.windowId === 'number') {\n        return msg as Message;\n      }\n      return null;\n    case 'GET_TRACKED_WINDOWS':\n    case 'CONFIG_UPDATED':\n    case 'SETTINGS_UPDATED':\n      return msg as Message;\n    default:\n      return null;\n  }\n}\n\nexport function isMessage(value: unknown): value is Message {\n  return asMessage(value) !== null;\n}\n","import { asMessage, type Message, type MessageResponse } from '../core.js';\nimport type { WindowTracker } from './WindowTracker.js';\nimport type { SyncManager } from './SyncManager.js';\n\nexport class MessageHandler {\n  constructor(\n    private readonly windowTracker: WindowTracker,\n    private readonly syncManager: SyncManager,\n  ) {}\n\n  async handleMessage(message: unknown): Promise<MessageResponse> {\n    const msg = asMessage(message);\n    if (!msg) {\n      return { error: 'Invalid message format' };\n    }\n\n    switch (msg.type) {\n      case 'TRACK_WINDOW':\n        return this.handleTrackWindow(msg);\n\n      case 'UNTRACK_WINDOW':\n        return this.handleUntrackWindow(msg);\n\n      case 'GET_TRACKED_WINDOWS':\n        return this.handleGetTrackedWindows();\n\n      default:\n        return { error: 'Unknown message type' };\n    }\n  }\n\n  private handleTrackWindow(msg: Message & { type: 'TRACK_WINDOW' }): MessageResponse {\n    this.windowTracker.track(msg.windowId);\n    console.log('Now tracking window:', msg.windowId);\n    this.syncManager.start();\n    return { success: true };\n  }\n\n  private async handleUntrackWindow(\n    msg: Message & { type: 'UNTRACK_WINDOW' },\n  ): Promise<MessageResponse> {\n    this.windowTracker.untrack(msg.windowId);\n    console.log('Stopped tracking window:', msg.windowId);\n\n    if (this.windowTracker.getTrackedCount() === 0) {\n      this.syncManager.stop();\n    } else {\n      await this.syncManager.syncNow();\n    }\n    return { success: true };\n  }\n\n  private handleGetTrackedWindows(): MessageResponse {\n    return { windowIds: this.windowTracker.getTrackedWindows() };\n  }\n}\n","import browser from 'webextension-polyfill';\nimport { type MessageResponse } from './core.js';\nimport { TanakaAPI } from './api/api.js';\nimport { getConfig } from './config/index.js';\nimport {\n  WindowTracker,\n  SyncManager,\n  TabEventHandler,\n  MessageHandler,\n  UserSettingsManager,\n} from './sync';\n\nclass BackgroundService {\n  private readonly api: TanakaAPI;\n  private readonly windowTracker: WindowTracker;\n  private readonly syncManager: SyncManager;\n  private readonly tabEventHandler: TabEventHandler;\n  private readonly userSettingsManager: UserSettingsManager;\n  private readonly messageHandler: MessageHandler;\n\n  constructor() {\n    this.api = new TanakaAPI(getConfig().serverUrl);\n    this.windowTracker = new WindowTracker();\n    this.syncManager = new SyncManager(this.api, this.windowTracker);\n    this.tabEventHandler = new TabEventHandler(this.windowTracker, this.syncManager);\n    this.userSettingsManager = new UserSettingsManager();\n    this.messageHandler = new MessageHandler(this.windowTracker, this.syncManager);\n  }\n\n  async initialize(): Promise<void> {\n    const settings = await this.userSettingsManager.load();\n    this.api.setAuthToken(settings.authToken);\n    this.setupListeners();\n    console.log('Tanaka background service initialized');\n  }\n\n  private setupListeners(): void {\n    this.tabEventHandler.setupListeners();\n\n    browser.runtime.onMessage.addListener(async (message: unknown): Promise<MessageResponse> => {\n      // Handle SETTINGS_UPDATED directly in background service\n      if (\n        typeof message === 'object' &&\n        message !== null &&\n        'type' in message &&\n        message.type === 'SETTINGS_UPDATED'\n      ) {\n        await this.reinitializeWithNewSettings();\n        return { success: true };\n      }\n\n      return this.messageHandler.handleMessage(message);\n    });\n  }\n\n  private async reinitializeWithNewSettings(): Promise<void> {\n    const settings = await this.userSettingsManager.load();\n    this.api.setAuthToken(settings.authToken);\n    console.log('Reinitialized with updated settings');\n  }\n}\n\nconst backgroundService = new BackgroundService();\nbackgroundService.initialize();\n"],"names":["APIError","message","status","statusText","TanakaAPI","baseUrl","token","additionalHeaders","path","options","url","response","_a","tabs","error","browserTabToSyncTab","tab","windowId","tabData","WindowTracker","SyncManager","api","windowTracker","localTabs","allTabs","windowTabs","browser","TabEventHandler","syncManager","tabId","removeInfo","changeInfo","moveInfo","USER_SETTINGS_DEFAULTS","USER_SETTINGS_KEYS","UserSettingsManager","stored","settings","asMessage","value","msg","MessageHandler","BackgroundService","getConfig","backgroundService"],"mappings":"2FAcO,MAAMA,UAAiB,KAAM,CAClC,YACEC,EACgBC,EACAC,EAChB,CACA,MAAMF,CAAO,EAHG,KAAA,OAAAC,EACA,KAAA,WAAAC,EAGhB,KAAK,KAAO,UAAA,CAEhB,CAEO,MAAMC,CAAU,CAIrB,YAAYC,EAAiB,CAF7B,KAAQ,MAAgB,cAGtB,GAAI,CACF,KAAK,QAAU,IAAI,IAAIA,CAAO,CAAA,MACxB,CACN,MAAM,IAAIL,EAAS,uBAAuBK,CAAO,EAAE,CAAA,CACrD,CAGF,aAAaC,EAAe,CAC1B,GAAI,CAACA,EACH,MAAM,IAAIN,EAAS,eAAe,EAGpC,KAAK,MAAQM,CAAA,CAGP,WAAWC,EAA4C,GAA4B,CACzF,MAAO,CACL,cAAe,UAAU,KAAK,KAAK,GACnC,GAAGA,CAAA,CACL,CAGF,MAAc,QAAWC,EAAcC,EAAuB,GAAgB,OAC5E,MAAMC,EAAM,IAAI,IAAIF,EAAM,KAAK,OAAO,EAEhCG,EAAW,MAAM,MAAMD,EAAI,WAAY,CAC3C,GAAGD,EACH,QAAS,CACP,GAAG,KAAK,WAAWA,EAAQ,OAAiC,CAAA,CAC9D,CACD,EAED,GAAI,CAACE,EAAS,GACZ,MAAM,IAAIX,EACR,iBAAiBW,EAAS,MAAM,IAAIA,EAAS,UAAU,GACvDA,EAAS,OACTA,EAAS,UAAA,EAIb,OAAIC,EAAAD,EAAS,QAAQ,IAAI,cAAc,IAAnC,MAAAC,EAAsC,SAAS,oBAC1CD,EAAS,KAAA,EAGXA,CAAA,CAGT,MAAM,SAASE,EAA6B,CAC1C,GAAI,CASF,OARa,MAAM,KAAK,QAAsB,QAAS,CACrD,OAAQ,OACR,QAAS,CACP,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAU,CAAE,KAAAA,EAAqB,CAAA,CAC7C,GAEW,IAAA,OACLC,EAAO,CACd,cAAQ,MAAM,eAAgBA,CAAK,EAC7BA,CAAA,CACR,CAGF,MAAM,aAAgC,CACpC,GAAI,CACF,aAAM,KAAK,QAAQ,SAAS,EACrB,EAAA,MACD,CACN,MAAO,EAAA,CACT,CAEJ,CAEO,SAASC,EAAoBC,EAAuBC,EAA8B,CACvF,GAAI,CAACD,EAAI,IAAM,CAACA,EAAI,IAAK,OAAO,KAEhC,MAAME,EAAmB,CACvB,IAAKF,EAAI,IACT,MAAOA,EAAI,OAAS,GACpB,WAAYA,EAAI,YAAc,GAC9B,MAAOA,EAAI,MACX,OAAQA,EAAI,OACZ,OAAQA,EAAI,MAAA,EAGd,MAAO,CACL,GAAI,OAAOA,EAAI,EAAE,GACjB,SAAU,UAAUC,CAAQ,GAC5B,KAAM,KAAK,UAAUC,CAAO,EAC5B,UAAW,KAAK,IAAA,CAAI,CAExB,CC1HO,MAAMC,CAAc,CAApB,aAAA,CACL,KAAQ,mBAAqB,GAAY,CAEzC,MAAMF,EAAwB,CAC5B,KAAK,eAAe,IAAIA,CAAQ,CAAA,CAGlC,QAAQA,EAAwB,CAC9B,KAAK,eAAe,OAAOA,CAAQ,CAAA,CAGrC,UAAUA,EAA2B,CACnC,OAAO,KAAK,eAAe,IAAIA,CAAQ,CAAA,CAGzC,mBAA8B,CAC5B,OAAO,MAAM,KAAK,KAAK,cAAc,CAAA,CAGvC,iBAA0B,CACxB,OAAO,KAAK,eAAe,IAAA,CAG7B,OAAc,CACZ,KAAK,eAAe,MAAA,CAAM,CAE9B,CCtBO,MAAMG,CAAY,CAIvB,YACmBC,EACAC,EACjB,CAFiB,KAAA,IAAAD,EACA,KAAA,cAAAC,EALnB,KAAQ,aAA8B,KACtC,KAAiB,iBAAmB,GAAA,CAOpC,MAAM,SAAyB,CAC7B,GAAI,KAAK,cAAc,gBAAA,IAAsB,EAE7C,GAAI,CACF,MAAMC,EAAY,MAAM,KAAK,mBAAA,EACvBC,EAAU,MAAM,KAAK,IAAI,SAASD,CAAS,EACjD,QAAQ,IAAI,UAAUA,EAAU,MAAM,yBAAyBC,EAAQ,MAAM,aAAa,CAAA,OACnFV,EAAO,CACd,QAAQ,MAAM,eAAgBA,CAAK,CAAA,CACrC,CAGF,OAAc,CACR,KAAK,eAET,KAAK,QAAA,EAEL,KAAK,aAAe,OAAO,YAAY,IAAM,CAC3C,KAAK,QAAA,CAAQ,EACZ,KAAK,gBAAgB,EAAA,CAG1B,MAAa,CACP,KAAK,eACP,cAAc,KAAK,YAAY,EAC/B,KAAK,aAAe,KACtB,CAGF,WAAqB,CACnB,OAAO,KAAK,eAAiB,IAAA,CAG/B,MAAc,oBAAqC,CACjD,MAAMD,EAAoD,CAAA,EAE1D,UAAWI,KAAY,KAAK,cAAc,kBAAA,EACxC,GAAI,CACF,MAAMQ,EAAa,MAAMC,EAAQ,KAAK,MAAM,CAAE,SAAAT,EAAU,EACxDJ,EAAK,KAAK,GAAGY,CAAU,CAAA,OAChBX,EAAO,CACd,QAAQ,MAAM,iCAAiCG,CAAQ,IAAKH,CAAK,CAAA,CAIrE,OAAOD,EACJ,IAAKG,GAASA,EAAI,SAAWD,EAAoBC,EAAKA,EAAI,QAAQ,EAAI,IAAK,EAC3E,OAAQA,GAAoBA,IAAQ,IAAI,CAAA,CAE/C,CC1DO,MAAMW,CAAgB,CAC3B,YACmBL,EACAM,EACjB,CAFiB,KAAA,cAAAN,EACA,KAAA,YAAAM,CAAA,CAGnB,gBAAuB,CACrBF,EAAQ,KAAK,UAAU,YAAY,KAAK,iBAAiB,KAAK,IAAI,CAAC,EACnEA,EAAQ,KAAK,UAAU,YAAY,KAAK,iBAAiB,KAAK,IAAI,CAAC,EACnEA,EAAQ,KAAK,UAAU,YAAY,KAAK,iBAAiB,KAAK,IAAI,CAAC,EACnEA,EAAQ,KAAK,QAAQ,YAAY,KAAK,eAAe,KAAK,IAAI,CAAC,EAC/DA,EAAQ,QAAQ,UAAU,YAAY,KAAK,oBAAoB,KAAK,IAAI,CAAC,CAAA,CAG3E,MAAc,iBAAiBV,EAAsC,CAC/DA,EAAI,UAAY,KAAK,cAAc,UAAUA,EAAI,QAAQ,IAC3D,QAAQ,IAAI,eAAgBA,CAAG,EAC/B,MAAM,KAAK,YAAY,QAAA,EACzB,CAGF,MAAc,iBACZa,EACAC,EACe,CACX,KAAK,cAAc,UAAUA,EAAW,QAAQ,IAClD,QAAQ,IAAI,eAAgBD,CAAK,EACjC,MAAM,KAAK,YAAY,QAAA,EACzB,CAGF,MAAc,iBACZA,EACAE,EACAf,EACe,CACXA,EAAI,UAAY,KAAK,cAAc,UAAUA,EAAI,QAAQ,GAAKe,EAAW,MAC3E,QAAQ,IAAI,eAAgBF,EAAOE,CAAU,EAC7C,MAAM,KAAK,YAAY,QAAA,EACzB,CAGF,MAAc,eACZF,EACAG,EACe,CACX,KAAK,cAAc,UAAUA,EAAS,QAAQ,IAChD,QAAQ,IAAI,aAAcH,EAAOG,CAAQ,EACzC,MAAM,KAAK,YAAY,QAAA,EACzB,CAGF,MAAc,oBAAoBf,EAAiC,CAC7D,KAAK,cAAc,UAAUA,CAAQ,IACvC,KAAK,cAAc,QAAQA,CAAQ,EACnC,QAAQ,IAAI,0BAA2BA,CAAQ,EAE3C,KAAK,cAAc,gBAAA,IAAsB,EAC3C,KAAK,YAAY,KAAA,EAEjB,MAAM,KAAK,YAAY,QAAA,EAE3B,CAEJ,CClEA,MAAMgB,EAAyB,CAC7B,UAAW,cACX,aAAc,GAChB,EAIMC,EAAqB,OAAO,KAAKD,CAAsB,EAEtD,MAAME,CAAoB,CAC/B,MAAM,MAA8B,CAClC,MAAMC,EAAS,MAAMV,EAAQ,QAAQ,MAAM,IAAIQ,CAAkB,EAEjE,MAAO,CACL,GAAGD,EACH,GAAGG,CAAA,CACL,CAGF,MAAM,KAAKC,EAAgD,CACzD,MAAMX,EAAQ,QAAQ,MAAM,IAAIW,CAAQ,CAAA,CAG1C,MAAM,OAAuB,CAC3B,MAAMX,EAAQ,QAAQ,MAAM,OAAOQ,CAAkB,CAAA,CAEzD,CCnBO,SAASI,EAAUC,EAAgC,CACxD,GAAI,OAAOA,GAAU,UAAYA,IAAU,MAAQ,EAAE,SAAUA,GAC7D,OAAO,KAGT,MAAMC,EAAMD,EAEZ,OAAQC,EAAI,KAAA,CACV,IAAK,eACL,IAAK,iBACH,OAAI,OAAOA,EAAI,UAAa,SACnBA,EAEF,KACT,IAAK,sBACL,IAAK,iBACL,IAAK,mBACH,OAAOA,EACT,QACE,OAAO,IAAA,CAEb,CC1BO,MAAMC,CAAe,CAC1B,YACmBnB,EACAM,EACjB,CAFiB,KAAA,cAAAN,EACA,KAAA,YAAAM,CAAA,CAGnB,MAAM,cAAc3B,EAA4C,CAC9D,MAAMuC,EAAMF,EAAUrC,CAAO,EAC7B,GAAI,CAACuC,EACH,MAAO,CAAE,MAAO,wBAAA,EAGlB,OAAQA,EAAI,KAAA,CACV,IAAK,eACH,OAAO,KAAK,kBAAkBA,CAAG,EAEnC,IAAK,iBACH,OAAO,KAAK,oBAAoBA,CAAG,EAErC,IAAK,sBACH,OAAO,KAAK,wBAAA,EAEd,QACE,MAAO,CAAE,MAAO,sBAAA,CAAuB,CAC3C,CAGM,kBAAkBA,EAA0D,CAClF,YAAK,cAAc,MAAMA,EAAI,QAAQ,EACrC,QAAQ,IAAI,uBAAwBA,EAAI,QAAQ,EAChD,KAAK,YAAY,MAAA,EACV,CAAE,QAAS,EAAA,CAAK,CAGzB,MAAc,oBACZA,EAC0B,CAC1B,YAAK,cAAc,QAAQA,EAAI,QAAQ,EACvC,QAAQ,IAAI,2BAA4BA,EAAI,QAAQ,EAEhD,KAAK,cAAc,gBAAA,IAAsB,EAC3C,KAAK,YAAY,KAAA,EAEjB,MAAM,KAAK,YAAY,QAAA,EAElB,CAAE,QAAS,EAAA,CAAK,CAGjB,yBAA2C,CACjD,MAAO,CAAE,UAAW,KAAK,cAAc,mBAAkB,CAAE,CAE/D,CC3CA,MAAME,CAAkB,CAQtB,aAAc,CACZ,KAAK,IAAM,IAAItC,EAAUuC,EAAA,EAAY,SAAS,EAC9C,KAAK,cAAgB,IAAIxB,EACzB,KAAK,YAAc,IAAIC,EAAY,KAAK,IAAK,KAAK,aAAa,EAC/D,KAAK,gBAAkB,IAAIO,EAAgB,KAAK,cAAe,KAAK,WAAW,EAC/E,KAAK,oBAAsB,IAAIQ,EAC/B,KAAK,eAAiB,IAAIM,EAAe,KAAK,cAAe,KAAK,WAAW,CAAA,CAG/E,MAAM,YAA4B,CAChC,MAAMJ,EAAW,MAAM,KAAK,oBAAoB,KAAA,EAChD,KAAK,IAAI,aAAaA,EAAS,SAAS,EACxC,KAAK,eAAA,EACL,QAAQ,IAAI,uCAAuC,CAAA,CAG7C,gBAAuB,CAC7B,KAAK,gBAAgB,eAAA,EAErBX,EAAQ,QAAQ,UAAU,YAAY,MAAOzB,GAGzC,OAAOA,GAAY,UACnBA,IAAY,MACZ,SAAUA,GACVA,EAAQ,OAAS,oBAEjB,MAAM,KAAK,4BAAA,EACJ,CAAE,QAAS,EAAA,GAGb,KAAK,eAAe,cAAcA,CAAO,CACjD,CAAA,CAGH,MAAc,6BAA6C,CACzD,MAAMoC,EAAW,MAAM,KAAK,oBAAoB,KAAA,EAChD,KAAK,IAAI,aAAaA,EAAS,SAAS,EACxC,QAAQ,IAAI,qCAAqC,CAAA,CAErD,CAEA,MAAMO,EAAoB,IAAIF,EAC9BE,EAAkB,WAAA"}