@use 'sass:map';
@use 'sass:meta';
@use '../core' as core;

// =====================================================================
// Theme Application System
// =====================================================================

// Apply theme colors as CSS properties
@mixin apply-theme($theme-map) {
  @each $key, $value in $theme-map {
    --#{$key}: #{$value};
  }
}

// Generate Mantine color scale
@mixin generate-mantine-scale($name, $base-color) {
  // 0-4: Tints
  @for $i from 0 through 4 {
    $amount: (5 - $i) * 18%;
    --mantine-color-#{$name}-#{$i}: #{core.tint($base-color, $amount)};
  }

  // 5: Base
  --mantine-color-#{$name}-5: #{$base-color};

  // 6-9: Shades
  @for $i from 6 through 9 {
    $amount: ($i - 5) * 15%;
    --mantine-color-#{$name}-#{$i}: #{core.shade($base-color, $amount)};
  }
}

// Map theme to Mantine variables
@mixin map-to-mantine($theme-map) {
  // Core color mappings
  --mantine-color-body: var(--background);
  --mantine-color-text: var(--text);
  --mantine-color-anchor: var(--primary);
  --mantine-color-default: var(--background-surface);
  --mantine-color-default-hover: var(--background-surface-light);
  --mantine-color-default-border: var(--border);
  --mantine-color-dimmed: var(--text-muted);

  // Additional Mantine mappings for better theme support
  --mantine-color-white: var(--background-surface);
  --mantine-color-black: var(--text);
  --mantine-color-gray-0: var(--background-surface);
  --mantine-color-gray-1: var(--background-surface-light);
  --mantine-color-gray-6: var(--text-muted);
  --mantine-color-gray-7: var(--text);
  --mantine-color-dark-0: var(--text);
  --mantine-color-dark-6: var(--background-surface);
  --mantine-color-dark-7: var(--background);

  // Primary color
  --mantine-color-primary-filled: var(--primary);
  --mantine-color-primary-filled-hover: var(--primary-dark);
  --mantine-color-primary-light: var(--primary-light);
  --mantine-color-primary-light-hover: var(--primary);

  // Typography
  --mantine-font-family: #{core.$font-family-base};
  --mantine-font-family-monospace: #{core.$font-family-mono};

  // Font sizes
  @each $key, $value in core.$font-sizes {
    --mantine-font-size-#{$key}: #{$value};
  }

  // Radius
  --mantine-radius-default: #{map.get(core.$radius-scale, md)};
  @each $key, $value in core.$radius-scale {
    --mantine-radius-#{$key}: #{$value};
  }

  // Spacing
  @each $key, $value in core.$spacing-scale {
    --mantine-spacing-#{$key}: #{$value};
  }

  // Shadows (use theme shadows if available)
  @if map.has-key($theme-map, shadow-glow) {
    --mantine-shadow-sm: var(--shadow-glow);
    --mantine-shadow-md: var(--shadow-glow);
    --mantine-shadow-lg: var(--shadow-glow-strong);
  } @else {
    @each $key, $value in core.$shadows {
      --mantine-shadow-#{$key}: #{$value};
    }
  }
}

// Complete theme application
@mixin apply-complete-theme($config) {
  $colors: map.get($config, colors);
  $scales: map.get($config, scales);

  // Apply colors
  @include apply-theme($colors);

  // Generate color scales
  @each $name, $scale in $scales {
    @if meta.type-of($scale) == 'color' {
      @include generate-mantine-scale($name, $scale);
    }
  }

  // Map to Mantine
  @include map-to-mantine($colors);

  // Apply overrides
  @if map.has-key($config, overrides) {
    @include apply-theme(map.get($config, overrides));
  }
}
