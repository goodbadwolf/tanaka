#!/bin/sh
#
# Commit Message Validation Hook
# ===============================
#
# Validates commit messages follow the project's conventional format.
# Triggered automatically by Git after you write a commit message.
#
# Format: <type>: <description>
# Types: feat, fix, docs, refactor, test, chore
#
# Skip validation: SKIP_COMMIT_MSG=1 git commit
#

# Emit function for color output that respects terminal capabilities
emit() {
    color="$1"
    message="$2"
    
    # Check if stdout is a terminal
    if [ -t 1 ]; then
        # Terminal - use color
        case "$color" in
            red)     printf "\033[0;31m%s\033[0m\n" "$message" ;;
            green)   printf "\033[0;32m%s\033[0m\n" "$message" ;;
            yellow)  printf "\033[1;33m%s\033[0m\n" "$message" ;;
            blue)    printf "\033[0;34m%s\033[0m\n" "$message" ;;
            gray)    printf "\033[0;90m%s\033[0m\n" "$message" ;;
            bold)    printf "\033[1m%s\033[0m\n" "$message" ;;
            *)       echo "$message" ;;  # No color for unknown
        esac
    else
        # Not a terminal (pipe, file, etc) - no color
        echo "$message"
    fi
}

# Logging functions
debug() { emit "gray" "$1"; }
info() { emit "blue" "$1"; }
warn() { emit "yellow" "$1"; }
error() { emit "red" "$1"; }
success() { emit "green" "$1"; }
header() { emit "bold" "$1"; }

# Git passes the commit message file path as the first argument
# This hook is triggered AFTER the commit message is written but BEFORE the commit is finalized
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Allow skipping with environment variable
if [ "$SKIP_COMMIT_MSG" = "1" ]; then
    exit 0
fi

# Skip validation for merge commits
if echo "$COMMIT_MSG" | grep -q "^Merge "; then
    exit 0
fi

# Skip validation for revert commits
if echo "$COMMIT_MSG" | grep -q "^Revert "; then
    exit 0
fi

# Extract first line (title)
TITLE=$(echo "$COMMIT_MSG" | head -n1)

# Check if it matches the pattern: type: description
if ! echo "$TITLE" | grep -qE '^(feat|fix|docs|refactor|test|chore):.+'; then
    echo ""
    error "Invalid commit message format!"
    echo ""
    debug "Expected format:"
    echo "  <type>: <description>"
    echo ""
    debug "Valid types:"
    echo "  feat     - New features or functionality"
    echo "  fix      - Bug fixes"
    echo "  docs     - Documentation changes only"
    echo "  refactor - Code restructuring without changing behavior"
    echo "  test     - Adding or fixing tests"
    echo "  chore    - Maintenance tasks (dependencies, config, etc.)"
    echo ""
    debug "Examples:"
    echo "  feat: add dark mode support"
    echo "  fix: prevent duplicate tab sync on fast clicks"
    echo "  docs: update installation instructions for macOS"
    echo ""
    debug "Your message:"
    error "  $TITLE"
    echo ""
    debug "To skip validation (use sparingly):"
    echo "  SKIP_COMMIT_MSG=1 git commit"
    exit 1
fi

# Check title length (should be under 72 characters)
TITLE_LENGTH=${#TITLE}
if [ "$TITLE_LENGTH" -gt 72 ]; then
    echo ""
    warn "Warning: Commit title is too long"
    echo ""
    debug "Title is $TITLE_LENGTH characters (recommended: â‰¤ 72)"
    debug "Consider making it more concise"
    echo ""
fi

# Check for lowercase after type
TYPE=$(echo "$TITLE" | cut -d: -f1)
DESCRIPTION=$(echo "$TITLE" | cut -d: -f2- | sed 's/^ *//')
FIRST_CHAR=$(echo "$DESCRIPTION" | cut -c1)

if echo "$FIRST_CHAR" | grep -q '[A-Z]'; then
    echo ""
    warn "Style suggestion:"
    debug "Don't capitalize first letter after type:"
    echo ""
    echo "  Current: $TYPE: $DESCRIPTION"
    echo "  Better:  $TYPE: $(echo "$DESCRIPTION" | sed 's/^\(.\)/\L\1/')"
    echo ""
fi

exit 0
